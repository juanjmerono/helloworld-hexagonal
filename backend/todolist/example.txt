CREATE SCHEMA IF NOT EXISTS TODO;

DROP TABLE IF EXISTS TODO.TITU;
DROP TABLE IF EXISTS TODO.COORDINADOR;
DROP TABLE IF EXISTS TODO.COORDINADOR_TITTU;
DROP TABLE IF EXISTS TODO.TRIBUNAL;

CREATE TABLE TODO.TITU (
		cod_titu VARCHAR(3) NOT NULL,
		tipo_titulacion VARCHAR(1) NOT NULL,
		curso_aca INTEGER NOT NULL
		--CONSTRAINT CONSTRAINT_PK_TITU PRIMARY KEY (cod_titu, tipo_titulacion, curso_aca)
	);

CREATE TABLE TODO.COORDINADOR (
		email VARCHAR(500) NOT NULL,
		nombre VARCHAR(82) NOT NULL
	);


CREATE TABLE TODO.COORDINADOR_TITU (
		cod_titu VARCHAR(3) NOT NULL,
		tipo_titulacion VARCHAR(1) NOT NULL,
		curso_aca INTEGER NOT NULL,
		email VARCHAR(500) NOT NULL
		--CONSTRAINT CONSTRAINT_PK_COORDINADOR PRIMARY KEY (cod_titu, tipo_titulacion, curso_aca, email)
	);

CREATE TABLE TODO.TRIBUNAL(
		user_id VARCHAR(8) NOT NULL,
		curso_aca INTEGER NOT NULL,
		cod_conv_defensa VARCHAR(1) NOT NULL,
		convocatoria VARCHAR(10) NOT NULL,
		cod_titu VARCHAR(3) NOT NULL,
		tipo_titulacion VARCHAR(1) NOT NULL,
		tipo_tribunal VARCHAR(2) NOT NULL,
		descripcion VARCHAR(150) NOT NULL,
		fecha_presentacion TIMESTAMP
		--CONSTRAINT CONSTRAINT_PK_TRIBUNAL PRIMARY KEY (user_id, cod_titu, tipo_titulacion, curso_aca)
	);

---------

@NoArgsConstructor
@AllArgsConstructor
@Getter
@Embeddable
public class TribunalId implements Serializable {
    
    private String user_id;
    private String cod_titu;
    private String tipo_titulacion;
    private int curso_aca;

}
---
@NoArgsConstructor
@Entity
@Table(schema = "TODO", name = "TRIBUNAL")
@Getter
public class TribunalEntity {

    @EmbeddedId
    private TribunalId id;

    @Column
    private String cod_conv_defensa;
    @Column
    private String convocatoria;
    @Column
    private String tipo_tribunal;
    @Column
    private String descripcion;
    @Column
    private LocalDateTime fecha_presentacion;

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumns({
        @JoinColumn(name = "cod_titu", referencedColumnName = "cod_titu", insertable = false, updatable = false, foreignKey = @ForeignKey(value = ConstraintMode.NO_CONSTRAINT)),
        @JoinColumn(name = "tipo_titulacion", referencedColumnName = "tipo_titulacion", insertable = false, updatable = false, foreignKey = @ForeignKey(value = ConstraintMode.NO_CONSTRAINT)),
        @JoinColumn(name = "curso_aca", referencedColumnName = "curso_aca", insertable = false, updatable = false, foreignKey = @ForeignKey(value = ConstraintMode.NO_CONSTRAINT)),
    })
    private TituEntity titu;

}

---------

@NoArgsConstructor
@AllArgsConstructor
@Embeddable
@Getter
public class TituId implements Serializable {
    
    private String cod_titu;
    private String tipo_titulacion;
    private int curso_aca;

}
---
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(schema = "TODO", name = "TITU")
@Getter
public class TituEntity {

    @EmbeddedId 
    private TituId id;
    
    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
        schema = "TODO", name = "COORDINADOR_TITU",
        foreignKey = @ForeignKey(value = ConstraintMode.NO_CONSTRAINT),
        joinColumns = {
            @JoinColumn(name = "cod_titu", referencedColumnName = "cod_titu", insertable = false, updatable = false, foreignKey = @ForeignKey(value = ConstraintMode.NO_CONSTRAINT)),
            @JoinColumn(name = "tipo_titulacion", referencedColumnName = "tipo_titulacion", insertable = false, updatable = false, foreignKey = @ForeignKey(value = ConstraintMode.NO_CONSTRAINT)),
            @JoinColumn(name = "curso_aca", referencedColumnName = "curso_aca", insertable = false, updatable = false, foreignKey = @ForeignKey(value = ConstraintMode.NO_CONSTRAINT))
        },
        inverseForeignKey = @ForeignKey(value = ConstraintMode.NO_CONSTRAINT),
        inverseJoinColumns = {
            @JoinColumn(name = "email", referencedColumnName = "email", insertable = false, updatable = false, foreignKey = @ForeignKey(value = ConstraintMode.NO_CONSTRAINT))
        })
    private List<CoordinadorEntity> coords;

}

---------

NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(schema = "TODO", name = "COORDINADOR")
@Getter
public class CoordinadorEntity {
    
    @Id
    private String email;

    @Column
    private String nombre;

    @ManyToMany(fetch = FetchType.LAZY, mappedBy = "coords")
    private List<TituEntity> titus;

    public String toString() {
        return String.format("******* COORDINADOR: [%s] %s", email, nombre);
    }

}

---------

@Repository("tribunalRepository")
public interface TribunalRepository extends JpaRepository<TribunalEntity,TribunalId> {
    Optional<TribunalEntity> findById(TribunalId id);
}

---------


    @Test
    public void testFindAllTodos() {
        TribunalId tId = new TribunalId("12345678","T1","G",2023);
        Optional<TribunalEntity> trib = tribunalRepository.findById(tId);
        assertTrue(trib.isPresent());
        assertEquals(2, trib.get().getTitu().getCoords().size());
        assertTrue(trib.get().getTitu().getCoords().stream()
            .anyMatch(c -> c.getNombre().equals("Coord1") && c.getEmail().equals("email1@a.com")));

        trib.get().getTitu().getCoords().stream().forEach(System.err::println);
    }
